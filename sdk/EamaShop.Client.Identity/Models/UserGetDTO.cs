// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace EamaShop.Client.Identity.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// 用户描述信息 如果未特殊说明 字段默认为非空
    /// </summary>
    public partial class UserGetDTO
    {
        /// <summary>
        /// Initializes a new instance of the UserGetDTO class.
        /// </summary>
        public UserGetDTO() { }

        /// <summary>
        /// Initializes a new instance of the UserGetDTO class.
        /// </summary>
        public UserGetDTO(long? userId = default(long?),
            string accountName = default(string), 
            string phone = default(string),
            string email = default(string), 
            string nickName = default(string), 
            string headImageUri = default(string),
            int? sexy = default(int?), 
            DateTime? lastLoginTime = default(DateTime?),
            int? role = default(int?),
            string country = default(string),
            string city = default(string), 
            string province = default(string))
        {
            UserId = userId;
            AccountName = accountName;
            Phone = phone;
            Email = email;
            NickName = nickName;
            HeadImageUri = headImageUri;
            Sexy = sexy;
            LastLoginTime = lastLoginTime;
            Role = role;
            Country = country;
            City = city;
            Province = province;
        }

        /// <summary>
        /// 用户的Id
        /// </summary>
        [JsonProperty(PropertyName = "UserId")]
        public long? UserId { get; private set; }

        /// <summary>
        /// 用户的账户名
        /// </summary>
        [JsonProperty(PropertyName = "AccountName")]
        public string AccountName { get; private set; }

        /// <summary>
        /// 用户绑定的手机号码 如果未绑定 则为空
        /// </summary>
        [JsonProperty(PropertyName = "Phone")]
        public string Phone { get; private set; }

        /// <summary>
        /// 用户绑定的邮箱地址，如果未绑定 则为空
        /// </summary>
        [JsonProperty(PropertyName = "Email")]
        public string Email { get; private set; }

        /// <summary>
        /// 用户的昵称
        /// </summary>
        [JsonProperty(PropertyName = "NickName")]
        public string NickName { get; private set; }

        /// <summary>
        /// 用户的头像uri地址
        /// </summary>
        [JsonProperty(PropertyName = "HeadImageUri")]
        public string HeadImageUri { get; private set; }

        /// <summary>
        /// 用户的性别 枚举 Male：0男  Female：1女 默认为1
        /// </summary>
        [JsonProperty(PropertyName = "Sexy")]
        public int? Sexy { get; private set; }

        /// <summary>
        /// 用户的最后一次登陆时间
        /// </summary>
        [JsonProperty(PropertyName = "LastLoginTime")]
        public DateTime? LastLoginTime { get; private set; }

        /// <summary>
        /// 用户的角色 枚举值 1 用户 2 商家 4 管理员 8 vip
        /// </summary>
        [JsonProperty(PropertyName = "Role")]
        public int? Role { get; private set; }

        /// <summary>
        /// 用户的所在国家
        /// </summary>
        [JsonProperty(PropertyName = "Country")]
        public string Country { get; private set; }

        /// <summary>
        /// 用户的所在城市
        /// </summary>
        [JsonProperty(PropertyName = "City")]
        public string City { get; private set; }

        /// <summary>
        /// 用户的所在省份
        /// </summary>
        [JsonProperty(PropertyName = "Province")]
        public string Province { get; private set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (this.AccountName != null)
            {
                if (this.AccountName.Length > 20)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "AccountName", 20);
                }
                if (this.AccountName.Length < 8)
                {
                    throw new ValidationException(ValidationRules.MinLength, "AccountName", 8);
                }
            }
        }
    }
}
