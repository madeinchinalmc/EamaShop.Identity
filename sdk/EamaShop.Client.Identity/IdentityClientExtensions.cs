// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace EamaShop.Client.Identity
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for IdentityClient.
    /// </summary>
    public static partial class IdentityClientExtensions
    {
            /// <summary>
            /// 使用jwtBearer授权登陆
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// 账号： 手机号/邮箱/用户名
            /// </param>
            /// <param name='password'>
            /// 用户密码
            /// </param>
            public static ResultDTOUserToken ApiAuthorizeJwtbearerPost(this IIdentityClient operations, string name, string password)
            {
                return Task.Factory.StartNew(s => ((IIdentityClient)s).ApiAuthorizeJwtbearerPostAsync(name, password), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 使用jwtBearer授权登陆
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// 账号： 手机号/邮箱/用户名
            /// </param>
            /// <param name='password'>
            /// 用户密码
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResultDTOUserToken> ApiAuthorizeJwtbearerPostAsync(this IIdentityClient operations, string name, string password, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthorizeJwtbearerPostWithHttpMessagesAsync(name, password, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 获取图片 非API型接口
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// 图片的名称 Eg.  1241asdjaoidn12od.jpg
            /// </param>
            public static void ApiImageByNameGet(this IIdentityClient operations, string name)
            {
                Task.Factory.StartNew(s => ((IIdentityClient)s).ApiImageByNameGetAsync(name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 获取图片 非API型接口
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// 图片的名称 Eg.  1241asdjaoidn12od.jpg
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiImageByNameGetAsync(this IIdentityClient operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiImageByNameGetWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// 上传图片
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='file'>
            /// 选择需要上传的文件
            /// </param>
            public static ResultDTOImageInfoDTO ApiImagePost(this IIdentityClient operations, System.IO.Stream file)
            {
                return Task.Factory.StartNew(s => ((IIdentityClient)s).ApiImagePostAsync(file), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 上传图片
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='file'>
            /// 选择需要上传的文件
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResultDTOImageInfoDTO> ApiImagePostAsync(this IIdentityClient operations, System.IO.Stream file, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiImagePostWithHttpMessagesAsync(file, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 获取当前的用户信息
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ResultDTOUserInfoDTO ApiUserGet(this IIdentityClient operations)
            {
                return Task.Factory.StartNew(s => ((IIdentityClient)s).ApiUserGetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 获取当前的用户信息
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResultDTOUserInfoDTO> ApiUserGetAsync(this IIdentityClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiUserGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 修改用户基础信息
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nickName'>
            /// 修改后的昵称
            /// </param>
            /// <param name='headImageUri'>
            /// 修改后的用户头像Uri地址
            /// </param>
            /// <param name='sexy'>
            /// 修改后的性别
            /// </param>
            /// <param name='country'>
            /// 修改后的用户所在国家
            /// </param>
            /// <param name='city'>
            /// 修改后的用户所在城市
            /// </param>
            /// <param name='province'>
            /// 修改后的用户所在省份
            /// </param>
            public static ResultDTO ApiUserPut(this IIdentityClient operations, string nickName, string headImageUri, int sexy, string country = default(string), string city = default(string), string province = default(string))
            {
                return Task.Factory.StartNew(s => ((IIdentityClient)s).ApiUserPutAsync(nickName, headImageUri, sexy, country, city, province), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 修改用户基础信息
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nickName'>
            /// 修改后的昵称
            /// </param>
            /// <param name='headImageUri'>
            /// 修改后的用户头像Uri地址
            /// </param>
            /// <param name='sexy'>
            /// 修改后的性别
            /// </param>
            /// <param name='country'>
            /// 修改后的用户所在国家
            /// </param>
            /// <param name='city'>
            /// 修改后的用户所在城市
            /// </param>
            /// <param name='province'>
            /// 修改后的用户所在省份
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResultDTO> ApiUserPutAsync(this IIdentityClient operations, string nickName, string headImageUri, int sexy, string country = default(string), string city = default(string), string province = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiUserPutWithHttpMessagesAsync(nickName, headImageUri, sexy, country, city, province, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 用户注册接口
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// 登陆的参数信息
            /// </param>
            public static ResultDTO ApiUserPost(this IIdentityClient operations, UserRegisterDTO parameters = default(UserRegisterDTO))
            {
                return Task.Factory.StartNew(s => ((IIdentityClient)s).ApiUserPostAsync(parameters), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 用户注册接口
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// 登陆的参数信息
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResultDTO> ApiUserPostAsync(this IIdentityClient operations, UserRegisterDTO parameters = default(UserRegisterDTO), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiUserPostWithHttpMessagesAsync(parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 修改密码接口
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='newPassword'>
            /// 设置的新密码
            /// </param>
            /// <param name='token'>
            /// 用户修改密码的凭证 短信为验证码，邮箱也为验证码
            /// </param>
            public static ResultDTO ApiUserPasswordPut(this IIdentityClient operations, string newPassword, string token)
            {
                return Task.Factory.StartNew(s => ((IIdentityClient)s).ApiUserPasswordPutAsync(newPassword, token), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 修改密码接口
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='newPassword'>
            /// 设置的新密码
            /// </param>
            /// <param name='token'>
            /// 用户修改密码的凭证 短信为验证码，邮箱也为验证码
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResultDTO> ApiUserPasswordPutAsync(this IIdentityClient operations, string newPassword, string token, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiUserPasswordPutWithHttpMessagesAsync(newPassword, token, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 绑定手机号码
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='phone'>
            /// 手机号码
            /// </param>
            /// <param name='verifyCode'>
            /// 验证码
            /// </param>
            public static ResultDTOWrapper ApiUserPhonePut(this IIdentityClient operations, string phone, string verifyCode)
            {
                return Task.Factory.StartNew(s => ((IIdentityClient)s).ApiUserPhonePutAsync(phone, verifyCode), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 绑定手机号码
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='phone'>
            /// 手机号码
            /// </param>
            /// <param name='verifyCode'>
            /// 验证码
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResultDTOWrapper> ApiUserPhonePutAsync(this IIdentityClient operations, string phone, string verifyCode, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiUserPhonePutWithHttpMessagesAsync(phone, verifyCode, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 修改用户角色为商户 该接口不会对外提供，只能在当前测试页面进行查看
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static ResultDTOWrapper ApiUserRoleByIdPut(this IIdentityClient operations, long id)
            {
                return Task.Factory.StartNew(s => ((IIdentityClient)s).ApiUserRoleByIdPutAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 修改用户角色为商户 该接口不会对外提供，只能在当前测试页面进行查看
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResultDTOWrapper> ApiUserRoleByIdPutAsync(this IIdentityClient operations, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiUserRoleByIdPutWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 发送验证码给指定的手机号
            /// 接口未实现，默认使用验证码123456
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='phone'>
            /// 用户的手机号码
            /// </param>
            public static ResultDTO ApiVerifycodePhonePost(this IIdentityClient operations, string phone = default(string))
            {
                return Task.Factory.StartNew(s => ((IIdentityClient)s).ApiVerifycodePhonePostAsync(phone), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 发送验证码给指定的手机号
            /// 接口未实现，默认使用验证码123456
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='phone'>
            /// 用户的手机号码
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResultDTO> ApiVerifycodePhonePostAsync(this IIdentityClient operations, string phone = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiVerifycodePhonePostWithHttpMessagesAsync(phone, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 发送邮箱验证码到指定邮箱
            /// 接口未实现，默认使用验证码123456
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// </param>
            public static ResultDTOWrapper ApiVerifycodeEmailPost(this IIdentityClient operations, string email = default(string))
            {
                return Task.Factory.StartNew(s => ((IIdentityClient)s).ApiVerifycodeEmailPostAsync(email), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 发送邮箱验证码到指定邮箱
            /// 接口未实现，默认使用验证码123456
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResultDTOWrapper> ApiVerifycodeEmailPostAsync(this IIdentityClient operations, string email = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiVerifycodeEmailPostWithHttpMessagesAsync(email, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
